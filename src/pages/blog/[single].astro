---
import Base from "@/layouts/Base.astro";
import PostSingle from "@/layouts/PostSingle.astro";
import { client } from "@/lib/sanityClient";Â 

// ðŸ‘‘ QUERY GROQ UNTUK ARTIKEL TUNGGAL DENGAN DATA SEO LENGKAP
const SINGLE_POST_QUERY = `
*[_type == "post" && slug.current == $slug][0]{
Â  // Kita ambil semua data yang dibutuhkan oleh layout dan SEO
Â  title,
Â  "slug": slug.current,
Â  publishedAt,
Â  body, // <-- Ini Portable Text, konten utama
Â  "imageUrl": mainImage.asset->url,
Â Â 
  // ðŸš€ PENTING: TAMBAH FIELD NAVIGASI DINAMIS
  relatedLinks, 
Â Â 
Â  // BARU: Tambahkan blok Author untuk mengambil Nama, Bio, dan Gambar
Â  "author": author->{
Â  Â  name,Â 
Â  Â  bio,Â 
Â  Â  "image": image.asset->url
Â  },
Â Â 
Â  // Data SEO (sesuai field di schema Sanity Anda)
Â  seo {
Â  Â  metaTitle,
Â  Â  metaDescription,
Â  Â  "ogImage": openGraphImage.asset->url
Â  }
}`;


export async function getStaticPaths() {
Â  // 1. Fetch semua slug dari Sanity untuk membuat paths
Â  const slugs = await client.fetch(`*[_type == "post" && defined(slug.current)].slug.current`);

Â  // 2. Buat paths menggunakan slug Sanity
Â  return slugs.map((slug) => ({
Â  Â  params: {
Â  Â  Â  single: slug,Â 
Â  Â  },
Â  }));
}


// Ambil slug dari URL
const { single } = Astro.params;Â 

// Fetch data artikel tunggal dari Sanity
const post = await client.fetch(SINGLE_POST_QUERY, { slug: single });

if (!post) {
Â  Â  // Jika artikel tidak ditemukan di Sanity
Â  Â  return Astro.redirect('/404');
}

// ðŸŽ¯ Mapping Data Sanity ke Variabel Lama (Mempertahankan Gaya Props)

// post.data.title => post.title
const title = post.title;

// post.data.meta_title => post.seo.metaTitle
const meta_title = post.seo?.metaTitle;

// post.data.description => post.seo.metaDescription
const description = post.seo?.metaDescription;

// post.data.image => post.seo.ogImage (jika ada) atau fallback ke post.imageUrl
const image = post.seo?.ogImage || post.imageUrl;


// ðŸš¨ PENTING: Struktur objek 'post' yang diteruskan ke PostSingle sekarang adalah objek Sanity.
// postForLayout.data akan berisi: {title, slug, publishedAt, body, imageUrl, author, seo, relatedLinks}
const postForLayout = {
Â  Â  // Membungkus post Sanity agar PostSingle dapat mengakses semua data
Â  Â  data: post,Â 
};

---

<Base
Â  title={title}
Â  meta_title={meta_title}
Â  description={description}
Â  image={image}
>
Â  <PostSingle post={postForLayout} />Â 
</Base>